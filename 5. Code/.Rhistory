as.double(coredata(accuraccyDistributionData[l,1]))
accuracyDistributionVector
i=1
temp = 0
for (i in 1:numberBars+1) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((accuraccyDistributionData[l,2] > temp - step) && (accuraccyDistributionData[l,2] < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
accuracyDistributionVector[i, 1] = occurences
accuracyDistributionVector[i, 2] = total
print(temp)
temp = temp + step
}
accuracyDistributionVector
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 5
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 2)
colnames(accuracyDistributionVector) = c("occurences", "total")
step = 1/numberBars
numberOccurences = 0
i=1
temp = 0
for (i in 1:numberBars+1) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((accuraccyDistributionData[l,2] > temp - step) && (accuraccyDistributionData[l,2] < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
accuracyDistributionVector[i, 1] = occurences
accuracyDistributionVector[i, 2] = total
print(temp)
temp = temp + step
}
accuracyDistributionVector
temp
temp = 0
i=1
occurences = 0
total = 0
l=1
((accuraccyDistributionData[l,2] > temp - step) && (accuraccyDistributionData[l,2] < temp))
l=2
((accuraccyDistributionData[l,2] > temp - step) && (accuraccyDistributionData[l,2] < temp))
l=3
((accuraccyDistributionData[l,2] > temp - step) && (accuraccyDistributionData[l,2] < temp))
(accuraccyDistributionData[l,2] > temp - step) && (accuraccyDistributionData[l,2] < temp)
(accuraccyDistributionData[,2] > temp - step) && (accuraccyDistributionData[,2] < temp)
temp
accuraccyDistributionData
accuraccyDistributionData[l,2]
temp
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 5
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 2)
colnames(accuracyDistributionVector) = c("occurences", "total")
step = 1/numberBars
numberOccurences = 0
i=1
temp = 0
for (i in 1:numberBars+1) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if (as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
accuracyDistributionVector[i, 1] = occurences
accuracyDistributionVector[i, 2] = total
print(temp)
temp = temp + step
}
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 5
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 2)
colnames(accuracyDistributionVector) = c("occurences", "total")
step = 1/numberBars
numberOccurences = 0
i=1
temp = 0
for (i in 1:numberBars+1) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
accuracyDistributionVector[i, 1] = occurences
accuracyDistributionVector[i, 2] = total
print(temp)
temp = temp + step
}
accuracyDistributionVector
predictionVector
plot(CumulativeSum(predictionVector), type="o", col="black", pch=20, cex=0.2)
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 5
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 2)
colnames(accuracyDistributionVector) = c("occurences", "total")
step = 1/numberBars
numberOccurences = 0
i=1
temp = 0
l=1
occurences = 0
total = 0
total
occurences
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
occurences
total
min(as.double(coredata(accuraccyDistributionData[l,2])))
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
min(accuraccyDistributionData[,2])
total
accuracyDistributionVector[i, 1]
accuracyDistributionVector
accuracyDistributionVector[i, 1] = occurences
accuracyDistributionVector
accuracyDistributionVector
accuracyDistributionVector[i, 2] = total
accuracyDistributionVector
print(temp)
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 5
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 2)
colnames(accuracyDistributionVector) = c("occurences", "total")
step = 1/numberBars
numberOccurences = 0
i=1
temp = 1/numberBars
for (i in 1:numberBars) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
accuracyDistributionVector[i, 1] = occurences
accuracyDistributionVector[i, 2] = total
print(temp)
temp = temp + step
}
accuracyDistributionVector
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 20
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 2)
colnames(accuracyDistributionVector) = c("occurences", "total")
step = 1/numberBars
numberOccurences = 0
i=1
temp = 1/numberBars
for (i in 1:numberBars) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
accuracyDistributionVector[i, 1] = occurences
accuracyDistributionVector[i, 2] = total
print(temp)
temp = temp + step
}
accuracyDistributionVector
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 20
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 3)
colnames(accuracyDistributionVector) = c("probability", "occurences", "total")
step = 1/numberBars
numberOccurences = 0
i=1
temp = 1/numberBars
for (i in 1:numberBars) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
accuracyDistributionVector[i, 1] = occurences/total
accuracyDistributionVector[i, 2] = occurences
accuracyDistributionVector[i, 3] = total
print(temp)
temp = temp + step
}
accuracyDistributionVector
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 20
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 3)
colnames(accuracyDistributionVector) = c("probability", "occurences", "total")
step = 1/numberBars
numberOccurences = 0
i=1
temp = 1/numberBars
for (i in 1:numberBars) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
if (total = 0) {
accuracyDistributionVector[i, 1] = 0
} else {
accuracyDistributionVector[i, 1] = occurences/total
}
accuracyDistributionVector[i, 2] = occurences
accuracyDistributionVector[i, 3] = total
#print(temp)
temp = temp + step
}
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 20
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 3)
colnames(accuracyDistributionVector) = c("probability", "occurences", "total")
step = 1/numberBars
numberOccurences = 0
i=1
temp = 1/numberBars
for (i in 1:numberBars) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
if (total = 0) {
accuracyDistributionVector[i, 1] = 0
} else {
accuracyDistributionVector[i, 1] = occurences/total
}
accuracyDistributionVector[i, 2] = occurences
accuracyDistributionVector[i, 3] = total
#print(temp)
temp = temp + step
}
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
if (total = 0) {
accuracyDistributionVector[i, 1] = 0
} else {
accuracyDistributionVector[i, 1] = occurences/total
}
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 20
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 3)
colnames(accuracyDistributionVector) = c("probability", "occurences", "total")
step = 1/numberBars
numberOccurences = 0
i=1
temp = 1/numberBars
for (i in 1:numberBars) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
if (total == 0) {
accuracyDistributionVector[i, 1] = 0
} else {
accuracyDistributionVector[i, 1] = occurences/total
}
accuracyDistributionVector[i, 2] = occurences
accuracyDistributionVector[i, 3] = total
#print(temp)
temp = temp + step
}
accuracyDistributionVector
rownames(accuracyDistributionVector[i,]) = paste(temp - step, "and",temp)
rownames(accuracyDistributionVector[i,])
accuracyDistributionVector[i,]
accuracyDistributionVector
rownames(accuracyDistributionVector[i,])
rownames(accuracyDistributionVector[i,]) = toString(paste(temp - step, "to",temp))
accuracyDistributionVector
accuracyDistributionVectorRowNames = matrix(0, nrow = accuracyDistributionVector, ncol =1)
accuracyDistributionVectorRowNames
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 20
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 3)
colnames(accuracyDistributionVector) = c("probability", "occurences", "total")
accuracyDistributionVectorRowNames = matrix(0, nrow = accuracyDistributionVector, ncol =1)
step = 1/numberBars
numberOccurences = 0
i=1
temp = 1/numberBars
for (i in 1:numberBars) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
if (total == 0) {
accuracyDistributionVector[i, 1] = 0
} else {
accuracyDistributionVector[i, 1] = occurences/total
}
accuracyDistributionVector[i, 2] = occurences
accuracyDistributionVector[i, 3] = total
accuracyDistributionVectorRowNames[i] = toString(paste(temp - step, "to",temp))
#print(temp)
temp = temp + step
}
rownames(accuracyDistributionVector) = accuracyDistributionVectorRowNames
accuracyDistributionVector
barplot(accuracyDistributionVector[,1])
plot = barplot(accuracyDistributionVector[,1])
lines(plot, 1, col = "red", lwd = 2)
plot = barplot(accuracyDistributionVector[,1])
lines(plot, 1, col = "red", lwd = 2)
lines(plot, rep(1, nrow(accuracyDistributionVector)), col = "red", lwd = 2)
lines
plot
barplot(accuracyDistributionVector[,1])
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 20
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 3)
colnames(accuracyDistributionVector) = c("probability", "occurences", "total")
accuracyDistributionVectorRowNames = matrix(0, nrow = accuracyDistributionVector, ncol =1)
step = 1/numberBars
numberOccurences = 0
i=1
temp = 1/numberBars
for (i in 1:numberBars) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
if (total == 0) {
accuracyDistributionVector[i, 1] = NA
} else {
accuracyDistributionVector[i, 1] = occurences/total
}
accuracyDistributionVector[i, 2] = occurences
accuracyDistributionVector[i, 3] = total
accuracyDistributionVectorRowNames[i] = toString(paste(temp - step, "to",temp))
#print(temp)
temp = temp + step
}
rownames(accuracyDistributionVector) = accuracyDistributionVectorRowNames
accuracyDistributionVector = complete.cases(accuracyDistributionVector)
accuracyDistributionVector
accuracyDistributionVector = accuracyDistributionVector[complete.cases(accuracyDistributionVector)]
accuracyDistributionVector
accuracyDistributionVector = accuracyDistributionVector[complete.cases(accuracyDistributionVector), ]
accuracyDistributionVector
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 20
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 3)
colnames(accuracyDistributionVector) = c("probability", "occurences", "total")
accuracyDistributionVectorRowNames = matrix(0, nrow = accuracyDistributionVector, ncol =1)
step = 1/numberBars
numberOccurences = 0
i=1
temp = 1/numberBars
for (i in 1:numberBars) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
if (total == 0) {
accuracyDistributionVector[i, 1] = NA
} else {
accuracyDistributionVector[i, 1] = occurences/total
}
accuracyDistributionVector[i, 2] = occurences
accuracyDistributionVector[i, 3] = total
accuracyDistributionVectorRowNames[i] = toString(paste(temp - step, "to",temp))
#print(temp)
temp = temp + step
}
rownames(accuracyDistributionVector) = accuracyDistributionVectorRowNames
accuracyDistributionVector = accuracyDistributionVector[complete.cases(accuracyDistributionVector), ]
accuracyDistributionVector
barplot(accuracyDistributionVector[,1])
bar <- barplot(accuracyDistributionVector[,1])
bar <- barplot(accuracyDistributionVector[,1])
lines(x = bar, y = rep(1, nrow(accuracyDistributionVector[,1])))
rep(1, nrow(accuracyDistributionVector[,1])
)
rep(1, nrow(accuracyDistributionVector[,1]))
nrow(accuracyDistributionVector[,1])
accuracyDistributionVector
lines(x = bar, y = rep(1, nrow(accuracyDistributionVector)))
bar <- barplot(accuracyDistributionVector[,1])
lines(x = bar, y = rep(1, nrow(accuracyDistributionVector)))
lines(x = bar, y = rep(0.1, nrow(accuracyDistributionVector)))
bar <- barplot(accuracyDistributionVector[,1], yaxp=c(0, 1, 0.2))
bar <- barplot(accuracyDistributionVector[,1], yaxp=c(0, 1, 0.2))
lines(x = bar, y = rep(0.1, nrow(accuracyDistributionVector)))
bar <- barplot(accuracyDistributionVector[,1], ylim=c(0,1))
bar <- barplot(accuracyDistributionVector[,1], ylim=c(0,1), xlim = c(0,1))
bar <- barplot(accuracyDistributionVector[,1], ylim=c(0,1))
lines(x = bar, y = rep(0.1, nrow(accuracyDistributionVector)))
plot(CumulativeSum(predictionVector), type="o", col="black", pch=20, cex=0.2)
accuracyDistributionVector
comparison = matrix(NA, nrow = nrow(accuracyDistributionVector), ncol = 1)
comparison
accuraccyDistributionData = merge(Data_Testing$spEvolution, ResultMLPTesting$outputIndex, predictionVector)
anyNA(accuraccyDistributionData)
numberBars = 20
accuracyDistributionVector = matrix(NA, nrow = numberBars, ncol = 3)
colnames(accuracyDistributionVector) = c("probability", "occurences", "total")
accuracyDistributionVectorRowNames = matrix(0, nrow = accuracyDistributionVector, ncol =1)
step = 1/numberBars
numberOccurences = 0
i=1
temp = 1/numberBars
for (i in 1:numberBars) {
occurences = 0
total = 0
for (l in 1:nrow(accuraccyDistributionData)){
if ((as.double(coredata(accuraccyDistributionData[l,2])) > (temp - step)) && (as.double(coredata(accuraccyDistributionData[l,2])) < temp)){
occurences = occurences + as.double(coredata(accuraccyDistributionData[l,1]))
total = total + 1
}
}
if (total == 0) {
accuracyDistributionVector[i, 1] = NA
} else {
accuracyDistributionVector[i, 1] = occurences/total
}
accuracyDistributionVector[i, 2] = occurences
accuracyDistributionVector[i, 3] = total
accuracyDistributionVectorRowNames[i] = toString(paste(temp - step, "to",temp))
#print(temp)
temp = temp + step
}
rownames(accuracyDistributionVector) = accuracyDistributionVectorRowNames
# Creating a line for comparison:
comparison = matrix(NA, nrow = nrow(accuracyDistributionVector), ncol = 1)
comparison = matrix(NA, nrow = nrow(accuracyDistributionVector), ncol = 1)
temp = 1/numberBars
step = 1/numberBars
for (i in 1:numberBars) {
if (i == 0) {
comparison[i] = 0
} else {
comparison[i] = temp
}
temp = temp + step
}
comparison
comparison = comparison[complete.cases(accuracyDistributionVector), ]
comparison
bar <- barplot(accuracyDistributionVector[,1], ylim=c(0,1))
lines(x = bar, y = comparison)
accuracyDistributionVector = accuracyDistributionVector[complete.cases(accuracyDistributionVector), ]
bar <- barplot(accuracyDistributionVector[,1], ylim=c(0,1))
lines(x = bar, y = comparison)
